Parameters:
  VPCCIDR:
    Description: "VPC"
    Type: String
    Default: "10.1.0.0/22"

  PublicSubnetCIDR:
    Description: "Public Subnet"
    Type: String
    Default: "10.1.0.0/24"

Resources:

  EC2Key:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: 'Ec2key'
      KeyType: ed25519

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public
      EnableDnsHostnames: True
      EnableDnsSupport: True

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNetworkAcl
      SubnetId: !Ref PublicSubnet


  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackId
      - Key: Network
        Value: Public

  AllowSSHInbound: # Set at lower level than the DenyAllInbound
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '99'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '0'
        To: '65535' # MaxPort

  # DenyAllInbound:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #     NetworkAclId:
  #       Ref: PublicNetworkAcl
  #     RuleNumber: '100'
  #     Protocol: '-1'
  #     RuleAction: deny
  #     Egress: 'false'
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: '0'
  #       To: '65535' # MaxPort

  OutboundPublicNetworkAclEntry: # Lazy
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Might use this eventually to only expose one instance to the intenert, commenting it out
  # BastionHost:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: 't2.nano'
  #     KeyName: !Ref EC2Key
  #     ImageId: ami-0c802847a7dd848c0
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: True
  #         DeviceIndex: 0
  #         DeleteOnTermination: True
  #         SubnetId: !Ref PublicSubnet
  #         GroupSet:
  #           - !Ref InboundSG
  #   Metadata: # For some reason cfn-lint is showing an error and it's super annoying
  #     cfn-lint:
  #       config:
  #         ignore_checks:
  #           - E3008

  InboundSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Main SG"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - 
          IpProtocol: -1
          CidrIp: 0.0.0.0/0

Outputs:
  VPCID:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-VPCID'

  SubnetID:
    Description: "Subnet ID"
    Value: !Ref PublicSubnet
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-SubnetID'

  KeyForEC2:
    Description: "Key name for VPC"
    Value: !Ref EC2Key
    Export:
      Name:
        'Fn::Sub': '${AWS::StackName}-EC2Key'
# Commented out: May use in future to limit ssh to only a single bastion host that can access all other resources in the subnet.
  # EC2DNS:
  #   Description: "Bastion EC2 DNS"
  #   Value: !GetAtt BastionHost.PublicDnsName
  #   Export:
  #     Name:
  #       'Fn::Sub': '${AWS::StackName}-EC2DNS'

  # EC2InternalIP:
  #   Description: "Bastion EC2"
  #   Value: !GetAtt BastionHost.PrivateIp
  #   Export:
  #     Name:
  #       'Fn::Sub': '${AWS::StackName}-EC2InternalIP'